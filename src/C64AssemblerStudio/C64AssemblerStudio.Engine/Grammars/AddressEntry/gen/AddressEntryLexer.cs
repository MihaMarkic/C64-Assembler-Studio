//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Git/Righthand/C64/C64-Assembler-Studio/src/C64AssemblerStudio/C64AssemblerStudio.Engine/Grammars/AddressEntry/AddressEntryLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AddressEntryLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN_PARENS=1, CLOSE_PARENS=2, PLUS=3, MINUS=4, STAR=5, DIV=6, DEC_NUMBER=7, 
		HEX_NUMBER=8, BIN_NUMBER=9, UNQUOTED_STRING=10, EOL=11, WS=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OPEN_PARENS", "CLOSE_PARENS", "PLUS", "MINUS", "STAR", "DIV", "DEC_NUMBER", 
		"HEX_NUMBER", "BIN_NUMBER", "INPUT_CHAR", "DEC_DIGIT", "HEX_DIGIT", "BIN_DIGIT", 
		"UNQUOTED_STRING", "EOL", "WS"
	};


	public AddressEntryLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public AddressEntryLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN_PARENS", "CLOSE_PARENS", "PLUS", "MINUS", "STAR", "DIV", "DEC_NUMBER", 
		"HEX_NUMBER", "BIN_NUMBER", "UNQUOTED_STRING", "EOL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AddressEntryLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AddressEntryLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,12,87,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,2,15,7,15,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,4,6,47,
		8,6,11,6,12,6,48,1,7,1,7,4,7,53,8,7,11,7,12,7,54,1,8,1,8,4,8,59,8,8,11,
		8,12,8,60,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,4,13,72,8,13,11,13,
		12,13,73,1,14,1,14,1,14,3,14,79,8,14,1,15,4,15,82,8,15,11,15,12,15,83,
		1,15,1,15,0,0,16,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,0,21,0,23,
		0,25,0,27,10,29,11,31,12,1,0,5,2,0,10,10,13,13,1,0,48,57,3,0,48,57,65,
		70,97,102,3,0,48,57,65,90,97,122,2,0,9,9,32,32,88,0,1,1,0,0,0,0,3,1,0,
		0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
		1,0,0,0,0,17,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,1,33,1,0,0,
		0,3,35,1,0,0,0,5,37,1,0,0,0,7,39,1,0,0,0,9,41,1,0,0,0,11,43,1,0,0,0,13,
		46,1,0,0,0,15,50,1,0,0,0,17,56,1,0,0,0,19,62,1,0,0,0,21,64,1,0,0,0,23,
		66,1,0,0,0,25,68,1,0,0,0,27,71,1,0,0,0,29,78,1,0,0,0,31,81,1,0,0,0,33,
		34,5,40,0,0,34,2,1,0,0,0,35,36,5,41,0,0,36,4,1,0,0,0,37,38,5,43,0,0,38,
		6,1,0,0,0,39,40,5,45,0,0,40,8,1,0,0,0,41,42,5,42,0,0,42,10,1,0,0,0,43,
		44,5,47,0,0,44,12,1,0,0,0,45,47,3,21,10,0,46,45,1,0,0,0,47,48,1,0,0,0,
		48,46,1,0,0,0,48,49,1,0,0,0,49,14,1,0,0,0,50,52,5,36,0,0,51,53,3,23,11,
		0,52,51,1,0,0,0,53,54,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,16,1,0,0,
		0,56,58,5,37,0,0,57,59,3,25,12,0,58,57,1,0,0,0,59,60,1,0,0,0,60,58,1,0,
		0,0,60,61,1,0,0,0,61,18,1,0,0,0,62,63,8,0,0,0,63,20,1,0,0,0,64,65,7,1,
		0,0,65,22,1,0,0,0,66,67,7,2,0,0,67,24,1,0,0,0,68,69,2,48,49,0,69,26,1,
		0,0,0,70,72,7,3,0,0,71,70,1,0,0,0,72,73,1,0,0,0,73,71,1,0,0,0,73,74,1,
		0,0,0,74,28,1,0,0,0,75,76,5,13,0,0,76,79,5,10,0,0,77,79,7,0,0,0,78,75,
		1,0,0,0,78,77,1,0,0,0,79,30,1,0,0,0,80,82,7,4,0,0,81,80,1,0,0,0,82,83,
		1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,85,1,0,0,0,85,86,6,15,0,0,86,32,
		1,0,0,0,7,0,48,54,60,73,78,83,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
