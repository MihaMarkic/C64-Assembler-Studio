//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Git/Righthand/C64/C64-Assembler-Studio/src/C64AssemblerStudio/C64AssemblerStudio.Engine/Grammars/AddressEntry/AddressEntryParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class AddressEntryParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN_PARENS=1, CLOSE_PARENS=2, PLUS=3, MINUS=4, STAR=5, DIV=6, DEC_NUMBER=7, 
		HEX_NUMBER=8, BIN_NUMBER=9, UNQUOTED_STRING=10, EOL=11, WS=12;
	public const int
		RULE_arguments = 0, RULE_argument = 1;
	public static readonly string[] ruleNames = {
		"arguments", "argument"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN_PARENS", "CLOSE_PARENS", "PLUS", "MINUS", "STAR", "DIV", "DEC_NUMBER", 
		"HEX_NUMBER", "BIN_NUMBER", "UNQUOTED_STRING", "EOL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AddressEntryParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AddressEntryParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public AddressEntryParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AddressEntryParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(AddressEntryParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(AddressEntryParser.CLOSE_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(AddressEntryParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(AddressEntryParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(AddressEntryParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(AddressEntryParser.DIV, 0); }
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAddressEntryParserListener typedListener = listener as IAddressEntryParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAddressEntryParserListener typedListener = listener as IAddressEntryParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAddressEntryParserVisitor<TResult> typedVisitor = visitor as IAddressEntryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 0, RULE_arguments);
		try {
			State = 25;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4;
				Match(OPEN_PARENS);
				State = 5;
				arguments();
				State = 6;
				Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8;
				argument();
				State = 9;
				Match(PLUS);
				State = 10;
				argument();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 12;
				argument();
				State = 13;
				Match(MINUS);
				State = 14;
				argument();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 16;
				argument();
				State = 17;
				Match(STAR);
				State = 18;
				argument();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 20;
				argument();
				State = 21;
				Match(DIV);
				State = 22;
				argument();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 24;
				argument();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(AddressEntryParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_NUMBER() { return GetToken(AddressEntryParser.DEC_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(AddressEntryParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_NUMBER() { return GetToken(AddressEntryParser.BIN_NUMBER, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAddressEntryParserListener typedListener = listener as IAddressEntryParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAddressEntryParserListener typedListener = listener as IAddressEntryParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAddressEntryParserVisitor<TResult> typedVisitor = visitor as IAddressEntryParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 2, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,12,30,2,0,7,0,2,1,7,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,26,8,0,1,1,1,1,1,1,0,0,2,0,
		2,0,1,1,0,7,10,32,0,25,1,0,0,0,2,27,1,0,0,0,4,5,5,1,0,0,5,6,3,0,0,0,6,
		7,5,2,0,0,7,26,1,0,0,0,8,9,3,2,1,0,9,10,5,3,0,0,10,11,3,2,1,0,11,26,1,
		0,0,0,12,13,3,2,1,0,13,14,5,4,0,0,14,15,3,2,1,0,15,26,1,0,0,0,16,17,3,
		2,1,0,17,18,5,5,0,0,18,19,3,2,1,0,19,26,1,0,0,0,20,21,3,2,1,0,21,22,5,
		6,0,0,22,23,3,2,1,0,23,26,1,0,0,0,24,26,3,2,1,0,25,4,1,0,0,0,25,8,1,0,
		0,0,25,12,1,0,0,0,25,16,1,0,0,0,25,20,1,0,0,0,25,24,1,0,0,0,26,1,1,0,0,
		0,27,28,7,0,0,0,28,3,1,0,0,0,1,25
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
