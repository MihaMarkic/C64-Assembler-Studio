//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Git/Righthand/C64/C64-Assembler-Studio/src/C64AssemblerStudio/C64AssemblerStudio.Engine/Grammars/BreakpointConditions/BreakpointConditionsParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IBreakpointConditionsParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class BreakpointConditionsParserBaseListener : IBreakpointConditionsParserListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="BreakpointConditionsParser.root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRoot([NotNull] BreakpointConditionsParser.RootContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BreakpointConditionsParser.root"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRoot([NotNull] BreakpointConditionsParser.RootContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionArguments</c>
	/// labeled alternative in <see cref="BreakpointConditionsParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditionArguments([NotNull] BreakpointConditionsParser.ConditionArgumentsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionArguments</c>
	/// labeled alternative in <see cref="BreakpointConditionsParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditionArguments([NotNull] BreakpointConditionsParser.ConditionArgumentsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionParens</c>
	/// labeled alternative in <see cref="BreakpointConditionsParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditionParens([NotNull] BreakpointConditionsParser.ConditionParensContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionParens</c>
	/// labeled alternative in <see cref="BreakpointConditionsParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditionParens([NotNull] BreakpointConditionsParser.ConditionParensContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConditionOperation</c>
	/// labeled alternative in <see cref="BreakpointConditionsParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditionOperation([NotNull] BreakpointConditionsParser.ConditionOperationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConditionOperation</c>
	/// labeled alternative in <see cref="BreakpointConditionsParser.condition"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditionOperation([NotNull] BreakpointConditionsParser.ConditionOperationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BreakpointConditionsParser.operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOperator([NotNull] BreakpointConditionsParser.OperatorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BreakpointConditionsParser.operator"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOperator([NotNull] BreakpointConditionsParser.OperatorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Bank</c>
	/// labeled alternative in <see cref="BreakpointConditionsParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBank([NotNull] BreakpointConditionsParser.BankContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Bank</c>
	/// labeled alternative in <see cref="BreakpointConditionsParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBank([NotNull] BreakpointConditionsParser.BankContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Memspace</c>
	/// labeled alternative in <see cref="BreakpointConditionsParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemspace([NotNull] BreakpointConditionsParser.MemspaceContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Memspace</c>
	/// labeled alternative in <see cref="BreakpointConditionsParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemspace([NotNull] BreakpointConditionsParser.MemspaceContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Label</c>
	/// labeled alternative in <see cref="BreakpointConditionsParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLabel([NotNull] BreakpointConditionsParser.LabelContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Label</c>
	/// labeled alternative in <see cref="BreakpointConditionsParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLabel([NotNull] BreakpointConditionsParser.LabelContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ArgumentRegister</c>
	/// labeled alternative in <see cref="BreakpointConditionsParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentRegister([NotNull] BreakpointConditionsParser.ArgumentRegisterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ArgumentRegister</c>
	/// labeled alternative in <see cref="BreakpointConditionsParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentRegister([NotNull] BreakpointConditionsParser.ArgumentRegisterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>HexNumber</c>
	/// labeled alternative in <see cref="BreakpointConditionsParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterHexNumber([NotNull] BreakpointConditionsParser.HexNumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>HexNumber</c>
	/// labeled alternative in <see cref="BreakpointConditionsParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitHexNumber([NotNull] BreakpointConditionsParser.HexNumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BreakpointConditionsParser.register"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegister([NotNull] BreakpointConditionsParser.RegisterContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BreakpointConditionsParser.register"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegister([NotNull] BreakpointConditionsParser.RegisterContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="BreakpointConditionsParser.variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariable([NotNull] BreakpointConditionsParser.VariableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="BreakpointConditionsParser.variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariable([NotNull] BreakpointConditionsParser.VariableContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
