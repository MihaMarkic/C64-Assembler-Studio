//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Git/Righthand/C64/C64-Assembler-Studio/src/C64AssemblerStudio/C64AssemblerStudio.Engine/Grammars/BreakpointConditions/BreakpointConditionsParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BreakpointConditionsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN_PARENS=1, CLOSE_PARENS=2, PLUS=3, MINUS=4, STAR=5, DIV=6, BITWISE_AND=7, 
		BITWISE_OR=8, OP_AND=9, OP_OR=10, AT=11, COLON=12, LT=13, GT=14, GT_OR_EQ=15, 
		LT_OR_EQ=16, NEQ=17, EQ=18, DOT=19, HEX_NUMBER=20, DEC_NUMBER=21, UNQUOTED_STRING=22, 
		WS=23, ErrorChar=24;
	public const int
		RULE_root = 0, RULE_condition = 1, RULE_operator = 2, RULE_argument = 3, 
		RULE_register = 4, RULE_variable = 5;
	public static readonly string[] ruleNames = {
		"root", "condition", "operator", "argument", "register", "variable"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'&&'", 
		"'||'", "'@'", "':'", "'<'", "'>'", "'>='", "'<='", "'!='", "'=='", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN_PARENS", "CLOSE_PARENS", "PLUS", "MINUS", "STAR", "DIV", "BITWISE_AND", 
		"BITWISE_OR", "OP_AND", "OP_OR", "AT", "COLON", "LT", "GT", "GT_OR_EQ", 
		"LT_OR_EQ", "NEQ", "EQ", "DOT", "HEX_NUMBER", "DEC_NUMBER", "UNQUOTED_STRING", 
		"WS", "ErrorChar"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BreakpointConditionsParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BreakpointConditionsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BreakpointConditionsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BreakpointConditionsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BreakpointConditionsParser.Eof, 0); }
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBreakpointConditionsParserVisitor<TResult> typedVisitor = visitor as IBreakpointConditionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			condition(0);
			State = 13;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	 
		public ConditionContext() { }
		public virtual void CopyFrom(ConditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConditionArgumentsContext : ConditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument() {
			return GetRuleContext<ArgumentContext>(0);
		}
		public ConditionArgumentsContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.EnterConditionArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.ExitConditionArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBreakpointConditionsParserVisitor<TResult> typedVisitor = visitor as IBreakpointConditionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionArguments(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionParensContext : ConditionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PARENS() { return GetToken(BreakpointConditionsParser.OPEN_PARENS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PARENS() { return GetToken(BreakpointConditionsParser.CLOSE_PARENS, 0); }
		public ConditionParensContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.EnterConditionParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.ExitConditionParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBreakpointConditionsParserVisitor<TResult> typedVisitor = visitor as IBreakpointConditionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionOperationContext : ConditionContext {
		public ConditionContext left;
		public ConditionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ConditionOperationContext(ConditionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.EnterConditionOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.ExitConditionOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBreakpointConditionsParserVisitor<TResult> typedVisitor = visitor as IBreakpointConditionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		return condition(0);
	}

	private ConditionContext condition(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionContext _localctx = new ConditionContext(Context, _parentState);
		ConditionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_condition, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PARENS:
				{
				_localctx = new ConditionParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 16;
				Match(OPEN_PARENS);
				State = 17;
				condition(0);
				State = 18;
				Match(CLOSE_PARENS);
				}
				break;
			case AT:
			case DOT:
			case HEX_NUMBER:
			case DEC_NUMBER:
			case UNQUOTED_STRING:
				{
				_localctx = new ConditionArgumentsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 20;
				argument();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 29;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionOperationContext(new ConditionContext(_parentctx, _parentState));
					((ConditionOperationContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_condition);
					State = 23;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 24;
					@operator();
					State = 25;
					((ConditionOperationContext)_localctx).right = condition(3);
					}
					} 
				}
				State = 31;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(BreakpointConditionsParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_OR_EQ() { return GetToken(BreakpointConditionsParser.GT_OR_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(BreakpointConditionsParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_OR_EQ() { return GetToken(BreakpointConditionsParser.LT_OR_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(BreakpointConditionsParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(BreakpointConditionsParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_AND() { return GetToken(BreakpointConditionsParser.OP_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP_OR() { return GetToken(BreakpointConditionsParser.OP_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(BreakpointConditionsParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(BreakpointConditionsParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(BreakpointConditionsParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(BreakpointConditionsParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_AND() { return GetToken(BreakpointConditionsParser.BITWISE_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR() { return GetToken(BreakpointConditionsParser.BITWISE_OR, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBreakpointConditionsParserVisitor<TResult> typedVisitor = visitor as IBreakpointConditionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 4, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 518136L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArgumentRegisterContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public RegisterContext register() {
			return GetRuleContext<RegisterContext>(0);
		}
		public ArgumentRegisterContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.EnterArgumentRegister(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.ExitArgumentRegister(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBreakpointConditionsParserVisitor<TResult> typedVisitor = visitor as IBreakpointConditionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentRegister(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BankContext : ArgumentContext {
		public IToken bank;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(BreakpointConditionsParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BreakpointConditionsParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(BreakpointConditionsParser.UNQUOTED_STRING, 0); }
		public BankContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.EnterBank(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.ExitBank(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBreakpointConditionsParserVisitor<TResult> typedVisitor = visitor as IBreakpointConditionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBank(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemspaceContext : ArgumentContext {
		public VariableContext memspace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(BreakpointConditionsParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RegisterContext register() {
			return GetRuleContext<RegisterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public MemspaceContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.EnterMemspace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.ExitMemspace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBreakpointConditionsParserVisitor<TResult> typedVisitor = visitor as IBreakpointConditionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemspace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LabelContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(BreakpointConditionsParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(BreakpointConditionsParser.UNQUOTED_STRING, 0); }
		public LabelContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBreakpointConditionsParserVisitor<TResult> typedVisitor = visitor as IBreakpointConditionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HexNumberContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(BreakpointConditionsParser.HEX_NUMBER, 0); }
		public HexNumberContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.EnterHexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.ExitHexNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBreakpointConditionsParserVisitor<TResult> typedVisitor = visitor as IBreakpointConditionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 6, RULE_argument);
		try {
			State = 46;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new BankContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 34;
				Match(AT);
				State = 35;
				((BankContext)_localctx).bank = Match(UNQUOTED_STRING);
				State = 36;
				Match(COLON);
				State = 37;
				condition(0);
				}
				break;
			case 2:
				_localctx = new MemspaceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 38;
				((MemspaceContext)_localctx).memspace = variable();
				State = 39;
				Match(COLON);
				State = 40;
				register();
				}
				break;
			case 3:
				_localctx = new LabelContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 42;
				Match(DOT);
				State = 43;
				Match(UNQUOTED_STRING);
				}
				break;
			case 4:
				_localctx = new ArgumentRegisterContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 44;
				register();
				}
				break;
			case 5:
				_localctx = new HexNumberContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 45;
				Match(HEX_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegisterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(BreakpointConditionsParser.UNQUOTED_STRING, 0); }
		public RegisterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_register; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.EnterRegister(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.ExitRegister(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBreakpointConditionsParserVisitor<TResult> typedVisitor = visitor as IBreakpointConditionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegister(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegisterContext register() {
		RegisterContext _localctx = new RegisterContext(Context, State);
		EnterRule(_localctx, 8, RULE_register);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(UNQUOTED_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_STRING() { return GetToken(BreakpointConditionsParser.UNQUOTED_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC_NUMBER() { return GetToken(BreakpointConditionsParser.DEC_NUMBER, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreakpointConditionsParserListener typedListener = listener as IBreakpointConditionsParserListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBreakpointConditionsParserVisitor<TResult> typedVisitor = visitor as IBreakpointConditionsParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 10, RULE_variable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			_la = TokenStream.LA(1);
			if ( !(_la==DEC_NUMBER || _la==UNQUOTED_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return condition_sempred((ConditionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool condition_sempred(ConditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,24,53,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,1,1,3,1,22,8,1,1,1,1,1,1,1,1,1,5,1,28,8,1,10,1,12,
		1,31,9,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,47,
		8,3,1,4,1,4,1,5,1,5,1,5,0,1,2,6,0,2,4,6,8,10,0,2,2,0,3,10,13,18,1,0,21,
		22,52,0,12,1,0,0,0,2,21,1,0,0,0,4,32,1,0,0,0,6,46,1,0,0,0,8,48,1,0,0,0,
		10,50,1,0,0,0,12,13,3,2,1,0,13,14,5,0,0,1,14,1,1,0,0,0,15,16,6,1,-1,0,
		16,17,5,1,0,0,17,18,3,2,1,0,18,19,5,2,0,0,19,22,1,0,0,0,20,22,3,6,3,0,
		21,15,1,0,0,0,21,20,1,0,0,0,22,29,1,0,0,0,23,24,10,2,0,0,24,25,3,4,2,0,
		25,26,3,2,1,3,26,28,1,0,0,0,27,23,1,0,0,0,28,31,1,0,0,0,29,27,1,0,0,0,
		29,30,1,0,0,0,30,3,1,0,0,0,31,29,1,0,0,0,32,33,7,0,0,0,33,5,1,0,0,0,34,
		35,5,11,0,0,35,36,5,22,0,0,36,37,5,12,0,0,37,47,3,2,1,0,38,39,3,10,5,0,
		39,40,5,12,0,0,40,41,3,8,4,0,41,47,1,0,0,0,42,43,5,19,0,0,43,47,5,22,0,
		0,44,47,3,8,4,0,45,47,5,20,0,0,46,34,1,0,0,0,46,38,1,0,0,0,46,42,1,0,0,
		0,46,44,1,0,0,0,46,45,1,0,0,0,47,7,1,0,0,0,48,49,5,22,0,0,49,9,1,0,0,0,
		50,51,7,1,0,0,51,11,1,0,0,0,3,21,29,46
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
