//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Git/Righthand/C64/C64-Assembler-Studio/src/C64AssemblerStudio/C64AssemblerStudio.Engine/Grammars/BreakpointConditions/BreakpointConditionsLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BreakpointConditionsLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN_PARENS=1, CLOSE_PARENS=2, PLUS=3, MINUS=4, STAR=5, DIV=6, BITWISE_AND=7, 
		BITWISE_OR=8, OP_AND=9, OP_OR=10, AT=11, COLON=12, LT=13, GT=14, GT_OR_EQ=15, 
		LT_OR_EQ=16, NEQ=17, EQ=18, DOT=19, HEX_NUMBER=20, DEC_NUMBER=21, UNQUOTED_STRING=22, 
		WS=23, ErrorChar=24;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OPEN_PARENS", "CLOSE_PARENS", "PLUS", "MINUS", "STAR", "DIV", "BITWISE_AND", 
		"BITWISE_OR", "OP_AND", "OP_OR", "AT", "COLON", "LT", "GT", "GT_OR_EQ", 
		"LT_OR_EQ", "NEQ", "EQ", "DOT", "HEX_NUMBER", "DEC_NUMBER", "HEX_DIGIT", 
		"DIGIT", "UNQUOTED_STRING", "WS", "ErrorChar"
	};


	public BreakpointConditionsLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BreakpointConditionsLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'&&'", 
		"'||'", "'@'", "':'", "'<'", "'>'", "'>='", "'<='", "'!='", "'=='", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN_PARENS", "CLOSE_PARENS", "PLUS", "MINUS", "STAR", "DIV", "BITWISE_AND", 
		"BITWISE_OR", "OP_AND", "OP_OR", "AT", "COLON", "LT", "GT", "GT_OR_EQ", 
		"LT_OR_EQ", "NEQ", "EQ", "DOT", "HEX_NUMBER", "DEC_NUMBER", "UNQUOTED_STRING", 
		"WS", "ErrorChar"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BreakpointConditionsLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BreakpointConditionsLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,24,128,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,1,1,1,1,2,1,2,1,
		3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,
		1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,
		1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,4,19,100,8,19,11,19,12,19,101,
		1,20,4,20,105,8,20,11,20,12,20,106,1,21,1,21,1,22,1,22,1,23,1,23,5,23,
		115,8,23,10,23,12,23,118,9,23,1,24,4,24,121,8,24,11,24,12,24,122,1,24,
		1,24,1,25,1,25,0,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
		11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,0,45,
		0,47,22,49,23,51,24,1,0,5,3,0,48,57,65,70,97,102,1,0,48,57,2,0,65,90,97,
		122,3,0,48,57,65,90,97,122,3,0,9,10,13,13,32,32,129,0,1,1,0,0,0,0,3,1,
		0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
		15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
		0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
		0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,1,53,1,0,0,0,3,55,1,0,0,0,5,57,1,0,0,0,7,59,1,0,0,0,9,61,1,0,0,
		0,11,63,1,0,0,0,13,65,1,0,0,0,15,67,1,0,0,0,17,69,1,0,0,0,19,72,1,0,0,
		0,21,75,1,0,0,0,23,77,1,0,0,0,25,79,1,0,0,0,27,81,1,0,0,0,29,83,1,0,0,
		0,31,86,1,0,0,0,33,89,1,0,0,0,35,92,1,0,0,0,37,95,1,0,0,0,39,97,1,0,0,
		0,41,104,1,0,0,0,43,108,1,0,0,0,45,110,1,0,0,0,47,112,1,0,0,0,49,120,1,
		0,0,0,51,126,1,0,0,0,53,54,5,40,0,0,54,2,1,0,0,0,55,56,5,41,0,0,56,4,1,
		0,0,0,57,58,5,43,0,0,58,6,1,0,0,0,59,60,5,45,0,0,60,8,1,0,0,0,61,62,5,
		42,0,0,62,10,1,0,0,0,63,64,5,47,0,0,64,12,1,0,0,0,65,66,5,38,0,0,66,14,
		1,0,0,0,67,68,5,124,0,0,68,16,1,0,0,0,69,70,5,38,0,0,70,71,5,38,0,0,71,
		18,1,0,0,0,72,73,5,124,0,0,73,74,5,124,0,0,74,20,1,0,0,0,75,76,5,64,0,
		0,76,22,1,0,0,0,77,78,5,58,0,0,78,24,1,0,0,0,79,80,5,60,0,0,80,26,1,0,
		0,0,81,82,5,62,0,0,82,28,1,0,0,0,83,84,5,62,0,0,84,85,5,61,0,0,85,30,1,
		0,0,0,86,87,5,60,0,0,87,88,5,61,0,0,88,32,1,0,0,0,89,90,5,33,0,0,90,91,
		5,61,0,0,91,34,1,0,0,0,92,93,5,61,0,0,93,94,5,61,0,0,94,36,1,0,0,0,95,
		96,5,46,0,0,96,38,1,0,0,0,97,99,5,36,0,0,98,100,3,43,21,0,99,98,1,0,0,
		0,100,101,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,40,1,0,0,0,103,105,
		3,45,22,0,104,103,1,0,0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,107,1,0,
		0,0,107,42,1,0,0,0,108,109,7,0,0,0,109,44,1,0,0,0,110,111,7,1,0,0,111,
		46,1,0,0,0,112,116,7,2,0,0,113,115,7,3,0,0,114,113,1,0,0,0,115,118,1,0,
		0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,48,1,0,0,0,118,116,1,0,0,0,119,
		121,7,4,0,0,120,119,1,0,0,0,121,122,1,0,0,0,122,120,1,0,0,0,122,123,1,
		0,0,0,123,124,1,0,0,0,124,125,6,24,0,0,125,50,1,0,0,0,126,127,9,0,0,0,
		127,52,1,0,0,0,5,0,101,106,116,122,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
